{"version":3,"sources":["components/HTTPEditor.module.css","components/HTTPEditor.js","components/HTTPButton.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","HTTPEditor","props","className","styles","editorWidth","type","placeholder","value","url","onChange","event","URLChangeHandler","id","rows","body","bodyChangeHandler","HTTPButton","onClick","clickHandler","App","state","requests","responses","handleButtonClick","setState","prevState","handleURLChange","index","newRequest","target","handleBodyChange","sendRequests","a","console","log","request","response","axios","get","post","Headers","put","delete","error","push","responseMsg","result","temp","status","JSON","stringify","data","undefined","render","map","key","style","whiteSpace","Component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.d4bb914f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"editorWidth\":\"HTTPEditor_editorWidth__2I9us\"};","import React from 'react';\nimport styles from './HTTPEditor.module.css';\nconst HTTPEditor = (props) => (\n  <div className={`${styles.editorWidth} btn btn-primary text-white mb-3`}>\n    <div className='row align-items-center'>\n      <div className='col-2'>HTTP</div>\n      <div className={props.type === 'GET' ? 'col-3' : 'col-2'}>\n        <div className='form-control'>{props.type}</div>\n      </div>\n      <div className={props.type === 'GET' ? 'col-7' : 'col-4'}>\n        <input\n          placeholder='Request URL'\n          type='text'\n          className='form-control'\n          value={props.url}\n          onChange={(event) =>\n            props.URLChangeHandler(event, props.id)\n          }\n        ></input>\n      </div>\n      {props.type !== 'GET' ? (\n        <div className='col-4'>\n          <textarea\n            placeholder='JSON Body'\n            className='form-control'\n            rows='1'\n            value={props.body}\n            onChange={(event) =>\n              props.bodyChangeHandler(event, props.id)\n            }\n          />\n        </div>\n      ) : null}\n    </div>\n  </div>\n);\nexport default HTTPEditor;\n","import React from 'react';\n\nconst HTTPButton = (props) => (\n  <div className='btn btn-primary mb-3 col-7' onClick={() => props.clickHandler(props.type)}>\n    <div className='row align-items-center'>\n      <div className='col-4'>HTTP</div>\n      <div className='col-8'>\n        <div className='form-control'>{props.type}</div>\n      </div>\n    </div>\n  </div>\n);\n\nexport default HTTPButton;\n","import React, { Component } from 'react';\nimport HTTPEditor from './components/HTTPEditor';\nimport HTTPButton from './components/HTTPButton';\nimport axios from 'axios';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    requests: [],\n    responses: [],\n  };\n  handleButtonClick = (type) => {\n    this.setState((prevState) =>\n      type === 'GET'\n        ? {\n            requests: [\n              ...prevState.requests,\n              {\n                type,\n                url: '',\n              },\n            ],\n          }\n        : {\n            requests: [\n              ...prevState.requests,\n              {\n                type,\n                url: '',\n                body: '',\n              },\n            ],\n          }\n    );\n  };\n\n  handleURLChange = (event, index) => {\n    const requests = [...this.state.requests];\n    const newRequest = { ...requests[index], url: event.target.value };\n    requests[index] = newRequest;\n    this.setState({ requests });\n  };\n\n  handleBodyChange = (event, index) => {\n    const requests = [...this.state.requests];\n    const newRequest = { ...requests[index], body: event.target.value };\n    requests[index] = newRequest;\n    this.setState({ requests });\n  };\n\n  sendRequests = async () => {\n    console.log('sending requests');\n    let responses = [];\n    for (const request of this.state.requests) {\n      try {\n        let response = null;\n        switch (request.type) {\n          case 'GET':\n            response = await axios.get(request.url);\n            console.log(response);\n            break;\n          case 'POST':\n            response = await axios.post(\n              request.url,\n              request.body ? request.body : {},\n             { Headers: {\n                  'Accept': 'application/json',\n                  'Content-Type': 'application/json'\n              }}\n            );\n            break;\n          case 'PUT':\n            response = await axios.put(\n              request.url,\n              request.body ? request.body : {}\n            );\n            break;\n          case 'DELETE':\n            response = await axios.delete(\n              request.url,\n              request.body ? request.body : {}\n            );\n            break;\n          default:\n            console.error('Unsupported request type');\n        }\n        responses.push(response);\n      } catch (err) {\n        responses.push(err);\n        console.log(typeof err);\n      }\n    }\n    this.setState({ responses: [...this.state.responses, ...responses] });\n    this.responseMsg(responses);\n  };\n  ///--------------------------------------------------------------------------------------------------------------------------------------------\n  //Resource: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status\n\n  responseMsg = (responses) => {\n    let result = [];\n    for (const response of this.state.responses) {\n      let temp = null;\n      if (response.status) {\n        temp =\n          '{ msg: HTTP ' +\n          response.status +\n          ' Success } ' +\n          JSON.stringify(response.data, undefined, 2);\n      } else if(response.response) {\n        temp = `HTTP ${response.response.status} Failure\n${JSON.stringify(response.response, undefined, 2)}`;\n      }else{\n        temp = `HTTP Network Error or Unknown`\n      }\n\n      result.push(temp);\n    }\n\n    return result;\n  };\n\n  //---------------------------------------------------------------------------------------------------------------------------------------------\n\n  render = () => (\n    <div className='container-fluid p-0 w-100 h-100'>\n      <div className='row no-gutters w-100 h-100'>\n        <div className='col-xs-12 col-lg-2 mt-auto mb-auto'>\n          <div className='row ml-3'>\n            <HTTPButton\n              type='GET'\n              clickHandler={this.handleButtonClick}\n            ></HTTPButton>\n            <HTTPButton\n              type='POST'\n              clickHandler={this.handleButtonClick}\n            ></HTTPButton>\n            <HTTPButton\n              type='PUT'\n              clickHandler={this.handleButtonClick}\n            ></HTTPButton>\n            <HTTPButton\n              type='DELETE'\n              clickHandler={this.handleButtonClick}\n            ></HTTPButton>\n          </div>\n        </div>\n\n        <div className='HTTPEditors-container'>\n          <div className='m-3 w-100'>\n            {this.state.requests.map((request, index) => (\n              <HTTPEditor\n                key={index}\n                id={index}\n                type={request.type}\n                url={request.url}\n                body={request.body}\n                URLChangeHandler={this.handleURLChange}\n                bodyChangeHandler={this.handleBodyChange}\n              ></HTTPEditor>\n            ))}\n          </div>\n        </div>\n        <div className='col-xs-12 col-lg-4 bg-dark'>\n          <div className='d-flex flex-column'>\n            <button\n              className='m-auto btn btn-primary'\n              onClick={this.sendRequests}\n            >\n              Send Requests\n            </button>\n            <div className='response-container'>\n              <div className='mb-3 ml-1 mr-1'>\n                {this.responseMsg(this.state.responses).map(\n                  (response, index) => (\n                    <div\n                      className='text-wrap text-break m'\n                      key={index}\n                      style={{\n                        whiteSpace: \"pre-line\",\n                      }}\n                    >\n                      \n                        <pre className=\"text-success\">{response}</pre>\n                      \n                    </div>\n                  )\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}